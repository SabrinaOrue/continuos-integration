name: "Continuos Integration Wrapper"
description: "Este archivo de pipeline de CI/CD es una plantilla genérica diseñada para soportar múltiples tecnologías y frameworks. Su objetivo es automatizar los pasos de integración y despliegue para proyectos de software, garantizando un proceso de desarrollo y entrega eficiente y consistente."

inputs:
  # Github
  github_token:
    description: "token del usuario con permisos de lectura en packages"
    required: true
  dry-run: 
    description: "Ejecuta el comando sin realizar cambios"
    required: false
    default: "false"

outputs:
  version: 
    description: "Numero de versión calculada"
    value: ${{ steps.version.outputs.new-version }}
  previusVersion: 
    description: "Numero de versión anterior"
    value: ${{ steps.version.outputs.previous-version }}
  branchName:
    description: "Nombre de Branch or Tags"
    value: ${{ steps.branch.output.BranchName }}

runs:
  using: "composite"
  steps:
    - name: Get the branch name
      id: branch
      run: echo "BranchName=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
      shell: bash

    - name: Use the branch name
      id: semanticBranches
      run: | 
        echo "The branch name is ${{ steps.branch.outputs.BranchName }}"
        if [[ ${{ steps.branch.outputs.BranchName }} == "main" ]]; then
          echo 'configureBranch=["main"]' >> $GITHUB_OUTPUT
        else
          echo 'configureBranch=["main", {"name": "${{ steps.branch.outputs.BranchName }}", "prerelease": "${{ steps.branch.outputs.BranchName }}"}]' >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: "Get Version"
      id: version
      uses: architecture-it/actions@next-version
      with:
        github_token: ${{ inputs.github_token }}
        only_version: 'true'
        branches: '${{ steps.semanticBranches.outputs.configureBranch }}'

    - name: Valid Version
      run: |
        echo "New version: ${{ steps.version.outputs.new-version }}"
        echo "Prev version: ${{ steps.version.outputs.previous-version }}"
        
        # If the dry-run is true, then exit 
        if [ "${{ inputs.dry-run }}" == "true" ]; then
          exit 0
        fi

        # If the new version is empty, then exit
        if [ -z "${{ steps.version.outputs.new-version }}" ]; then
          echo "☢☢ No version found, Make sure you've used comentional commits ☢☢"
          exit 1
        fi

        # If the version is the same, then exit
        if [ "${{ steps.version.outputs.new-version }}" == "${{ steps.version.outputs.previous-version }}" ]; then
          echo "☢☢ No changes in version, Make sure you've used comentional commits ☢☢"
          exit 1
        fi

      shell: bash

